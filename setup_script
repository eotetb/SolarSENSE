#!/bin/bash
#DIR variable is the directory of this file, no matter where you run it from
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

#update
sudo apt-get update -y
sudo apt-get upgrade -y

#install all necessary packages
echo "Installing necessary packages"
sudo apt-get install -y hostapd dnsmasq nginx python3 python3-dev python3-pip build-essential mongodb-server git bluetooth bluez mosquitto mosquitto-clients
sudo pip3 install flask uwsgi flask_wtf pymongo flask_jsonpify flask-cors
python3 -m pip install pymongo==3.4.0
git clone https://github.com/ThomDietrich/miflora-mqtt-daemon.git /opt/miflora-mqtt-daemon

#move configuration files for dhcpcd, dnsmasq, hostapd, and running it all at start up
#  dhcpd handles DHCP for the hotspot
#  dnsmasq handles DNS, router advertisement, etc
#  hostapd allows us to use the wifi chip as a access point
#  wifistart is a script that makes an access point network interface work together with the normal wifi interface at boot
#  rc.local holds info on scripts to run at start up
echo "moving configuration files"
sudo cp $DIR/setup/dhcpcd.conf /etc/dhcpcd.conf
#backup the original dnsmasq.conf file
sudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.orig
sudo cp $DIR/setup/dnsmasq.conf /etc/dnsmasq.conf
sudo cp $DIR/setup/hostapd.conf /etc/hostapd/hostapd.conf
sudo iwconfig wlan0 channel 1
sudo cp $DIR/setup/hostapd /etc/default/hostapd
sudo cp $DIR/setup/wifistart /usr/local/bin/wifistart
sudo cp $DIR/setup/autofindFlowerCare /usr/local/bin/autofindFlowerCare
sudo chmod +x /usr/local/bin/wifistart
sudo chmod +x /usr/local/bin/autofindFlowerCare
sudo cp $DIR/setup/rc.local /etc/rc.local
sudo sed -i "s@DIRECTORY_HERE@$DIR@g" /etc/rc.local
sudo sed -i "s@DIRECTORY_HERE@$DIR@g" $DIR/uwsgi_config.ini

#move mqtt daemon config file
sudo cp $DIR/setup/config.ini /opt/miflora-mqtt-daemon/config.ini
#move miflora dameon to /opt/miflora-mqtt-daemon
sudo cp $DIR/setup/miflora-mqtt-daemon.py /opt/miflora-mqtt-daemon
sudo echo -e "11.11.11.11 \t solar.sense" >> /etc/hosts

#setup Flask, uWSGI, and NGINX
echo "Setting up Flask, uWSGI, and NGINX"
sudo export FLASK_DEBUG=1
sudo chown www-data $DIR

#delete the default NGINX page
sudo rm /etc/nginx/sites-enabled/default
# set NGINX as a reverse proxy, serving the socket from uWSGI at port 80 instead
sudo cp $DIR/setup/solarSENSE.conf /etc/nginx/sites-available/solarSENSE.conf
sudo ln -s /etc/nginx/sites-available/solarSENSE.conf /etc/nginx/sites-enabled

echo "Setting up MongoDB"
#Setup MongoDB as a service 
sudo mkdir -p /data/db/
sudo chown -R `id -un` /data/db/
sudo service mongodb start
mongo solarsensereports --eval 'db.reports.find()'
#the line above won't print anything meaningful out, but will make sure 
#  solarsensereports db exists

# Setup the Historical Climate Database
cd ./Database\ Structures
python3 historicalDataDB.py
python3 convertToISO.py mesaGatewayClimateData

echo "Setting up the miflora part"
#miflora setup
cd /opt/miflora-mqtt-daemon
sudo pip3 install -r requirements.txt
sudo systemctl enable mosquitto.service

#disable regular resources, since we just defined our own custom ones
echo "Stopping hostapd"
sudo systemctl stop hostapd
echo "Stopping dnsmasq"
sudo systemctl stop dnsmasq
echo "Stopping dhcpcd"
sudo systemctl stop dhcpcd
echo "Disabling hostapd"
sudo systemctl disable hostapd
echo "Disabling dnsmasq"
sudo systemctl disable dnsmasq
echo "Disabling dhcpcd"
sudo systemctl disable dhcpcd

echo "All done! .... Now rebooting"
sudo reboot
